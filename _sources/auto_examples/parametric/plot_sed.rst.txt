
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/parametric/plot_sed.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_parametric_plot_sed.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_parametric_plot_sed.py:


Generate parametric galaxy SED
===============================

Example for generating the rest-frame spectrum for a parametric galaxy
including photometry. This example will:
- build a parametric galaxy (see make_sfzh)
- calculate spectral luminosity density

.. GENERATED FROM PYTHON SOURCE LINES 10-175



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/parametric/images/sphx_glr_plot_sed_001.png
         :alt: plot sed
         :srcset: /auto_examples/parametric/images/sphx_glr_plot_sed_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/parametric/images/sphx_glr_plot_sed_002.png
         :alt: plot sed
         :srcset: /auto_examples/parametric/images/sphx_glr_plot_sed_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/parametric/images/sphx_glr_plot_sed_003.png
         :alt: plot sed
         :srcset: /auto_examples/parametric/images/sphx_glr_plot_sed_003.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/parametric/images/sphx_glr_plot_sed_004.png
         :alt: plot sed
         :srcset: /auto_examples/parametric/images/sphx_glr_plot_sed_004.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/parametric/images/sphx_glr_plot_sed_005.png
         :alt: plot sed
         :srcset: /auto_examples/parametric/images/sphx_glr_plot_sed_005.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/parametric/images/sphx_glr_plot_sed_006.png
         :alt: plot sed
         :srcset: /auto_examples/parametric/images/sphx_glr_plot_sed_006.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/parametric/images/sphx_glr_plot_sed_007.png
         :alt: plot sed
         :srcset: /auto_examples/parametric/images/sphx_glr_plot_sed_007.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/parametric/images/sphx_glr_plot_sed_008.png
         :alt: plot sed
         :srcset: /auto_examples/parametric/images/sphx_glr_plot_sed_008.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ----------
    SUMMARY OF PARAMETERISED STAR FORMATION HISTORY
    <class 'synthesizer.parametric.sf_hist.Constant'>
    duration: 10 Myr
    median age: 5.00 Myr
    mean age: 5.00 Myr
    ----------

    Pure stellar spectra
    Intrinsic spectra
    Simple dust and gas screen
    CF00 model
    Pacman model
    Pacman model (no Ly-alpha escape, and no dust)
    Pacman model (complex)
    CF00 implemented within the Pacman model
    +-------------------------------------------------------------------------------+
    |                                    GALAXY                                     |
    +---------------+---------------------------------------------------------------+
    | Attribute     | Value                                                         |
    +---------------+---------------------------------------------------------------+
    | galaxy_type   | 'Parametric'                                                  |
    +---------------+---------------------------------------------------------------+
    | stars         | <synthesizer.parametric.stars.Stars object at 0x7f69392dca00> |
    +---------------+---------------------------------------------------------------+
    | name          | 'parametric galaxy'                                           |
    +---------------+---------------------------------------------------------------+
    | sfzh (51, 13) | 0.00e+00 -> 1.85e+07 (Mean: 1.51e+05)                         |
    +---------------+---------------------------------------------------------------+
    +-------------------------------------------------------------------------------+
    |                                      SED                                      |
    +-------------+-----------------------------------------------------------------+
    | Attribute   | Value                                                           |
    +-------------+-----------------------------------------------------------------+
    | redshift    | 0                                                               |
    +-------------+-----------------------------------------------------------------+
    | lam (9244,) | 1.30e-04 Å -> 2.99e+11 Å (Mean: 9.73e+09 Å)                     |
    +-------------+-----------------------------------------------------------------+
    | nu (9244,)  | 1.00e+07 Hz -> 2.31e+22 Hz (Mean: 8.51e+19 Hz)                  |
    +-------------+-----------------------------------------------------------------+
    | lnu (9244,) | 0.00e+00 erg/(Hz*s) -> 7.09e+31 erg/(Hz*s) (Mean: 2.58e+29 erg) |
    +-------------+-----------------------------------------------------------------+
    --------------------------------------------
    |         PHOTOMETRY (LUMINOSITY)          |
    |--------------------|---------------------|
    | U (λ = 3.64e+03 Å) | 8.26e+28 erg/(Hz*s) |
    |--------------------|---------------------|
    | V (λ = 5.51e+03 Å) | 3.82e+28 erg/(Hz*s) |
    |--------------------|---------------------|
    | J (λ = 1.22e+04 Å) | 3.45e+28 erg/(Hz*s) |
    --------------------------------------------







|

.. code-block:: Python


    from synthesizer.emission_models import (
        AttenuatedEmission,
        BimodalPacmanEmission,
        CharlotFall2000,
        IncidentEmission,
        PacmanEmission,
        ReprocessedEmission,
    )
    from synthesizer.emission_models.attenuation import PowerLaw
    from synthesizer.filters import FilterCollection
    from synthesizer.grid import Grid
    from synthesizer.parametric import SFH, Stars, ZDist
    from synthesizer.parametric.galaxy import Galaxy
    from unyt import Myr

    if __name__ == "__main__":
        # Define the grid
        grid_name = "test_grid"
        grid_dir = "../../tests/test_grid/"
        grid = Grid(grid_name, grid_dir=grid_dir)

        # Define the parameters of the star formation and metal enrichment
        # histories
        sfh_p = {"duration": 10 * Myr}
        Z_p = {
            "log10metallicity": -2.0
        }  # can also use linear metallicity e.g. {'Z': 0.01}
        stellar_mass = 1e8

        # Define the functional form of the star formation and metal enrichment
        # histories
        sfh = SFH.Constant(**sfh_p)  # constant star formation
        print(sfh)  # print sfh summary

        metal_dist = ZDist.DeltaConstant(**Z_p)  # constant metallicity

        # Get the 2D star formation and metal enrichment history for the given SPS
        # grid.
        stars = Stars(
            grid.log10age,
            grid.metallicity,
            sf_hist=sfh,
            metal_dist=metal_dist,
            initial_mass=stellar_mass,
        )

        # Create a galaxy object
        galaxy = Galaxy(stars)

        # Generate pure stellar spectra alone
        incident = IncidentEmission(grid)
        galaxy.stars.get_spectra(incident)
        print("Pure stellar spectra")
        galaxy.plot_spectra(
            show=True, combined_spectra=False, stellar_spectra=True
        )

        # Generate intrinsic spectra (which includes reprocessing by gas)
        reprocessed = ReprocessedEmission(grid, fesc=0.5)
        galaxy.stars.get_spectra(reprocessed)
        print("Intrinsic spectra")
        galaxy.plot_spectra(
            show=True, combined_spectra=False, stellar_spectra=True
        )

        # Simple dust and gas screen
        attenuated = AttenuatedEmission(
            tau_v=0.1,
            apply_dust_to=reprocessed,
            dust_curve=PowerLaw(slope=-1),
            emitter="stellar",
        )
        galaxy.stars.get_spectra(attenuated)
        print("Simple dust and gas screen")
        galaxy.plot_spectra(
            show=True, combined_spectra=False, stellar_spectra=True
        )

        # --- CF00 model
        cf00 = CharlotFall2000(
            grid=grid,
            tau_v_ism=0.1,
            tau_v_nebular=0.1,
            dust_curve_ism=PowerLaw(slope=-0.7),
            dust_curve_nebular=PowerLaw(slope=-1.3),
        )
        galaxy.stars.get_spectra(cf00)
        print("CF00 model")
        galaxy.plot_spectra(
            show=True, combined_spectra=False, stellar_spectra=True
        )

        # # --- pacman model
        pc_fesc = PacmanEmission(
            grid,
            tau_v=0.1,
            dust_curve=PowerLaw(slope=-1),
            fesc=0.5,
        )
        galaxy.stars.get_spectra(pc_fesc)
        print("Pacman model")
        galaxy.plot_spectra(
            show=True, combined_spectra=False, stellar_spectra=True
        )

        # Pacman model (no Lyman-alpha escape and no dust)
        pc_lya = PacmanEmission(
            grid,
            tau_v=0.1,
            dust_curve=PowerLaw(slope=-1),
            fesc_ly_alpha=0.0,
        )
        galaxy.stars.get_spectra(pc_lya)
        print("Pacman model (no Ly-alpha escape, and no dust)")
        galaxy.plot_spectra(
            show=True, combined_spectra=False, stellar_spectra=True
        )

        # # --- pacman model (complex)
        pc_complex = PacmanEmission(
            grid,
            tau_v=0.6,
            dust_curve=PowerLaw(slope=-1),
            fesc=0.0,
            fesc_ly_alpha=0.5,
        )
        galaxy.stars.get_spectra(pc_complex)
        print("Pacman model (complex)")
        galaxy.plot_spectra(
            show=True, combined_spectra=False, stellar_spectra=True
        )

        # --- CF00 model implemented within pacman model
        cf_with_fesc = BimodalPacmanEmission(
            grid,
            tau_v_ism=0.1,
            tau_v_nebular=0.1,
            dust_curve_ism=PowerLaw(slope=-1),
            dust_curve_nebular=PowerLaw(slope=-1),
            fesc=0.1,
            fesc_ly_alpha=0.1,
        )
        galaxy.stars.get_spectra(cf_with_fesc)
        print("CF00 implemented within the Pacman model")
        galaxy.plot_spectra(
            show=True, combined_spectra=False, stellar_spectra=True
        )

        # Print galaxy summary
        print(galaxy)

        sed = galaxy.stars.spectra["attenuated"]
        print(sed)

        # Generate broadband photometry using 3 top-hat filters
        tophats = {
            "U": {"lam_eff": 3650, "lam_fwhm": 660},
            "V": {"lam_eff": 5510, "lam_fwhm": 880},
            "J": {"lam_eff": 12200, "lam_fwhm": 2130},
        }
        fc = FilterCollection(tophat_dict=tophats, new_lam=grid.lam)

        bb_lnu = sed.get_photo_luminosities(fc)
        print(bb_lnu)


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 2.809 seconds)


.. _sphx_glr_download_auto_examples_parametric_plot_sed.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_sed.ipynb <plot_sed.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_sed.py <plot_sed.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_sed.zip <plot_sed.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
