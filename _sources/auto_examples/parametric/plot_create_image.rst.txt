
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/parametric/plot_create_image.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_parametric_plot_create_image.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_parametric_plot_create_image.py:


Create image example
====================

Example for generating a rest-frame physical scale image. This example will:
- Build a parametric galaxy (see make_sfzh and make_sed)
- Define its morphology
- Calculate rest-frame luminosities for the UVJ bands
- Make an image of the galaxy, including an RGB image.

.. GENERATED FROM PYTHON SOURCE LINES 11-93



.. image-sg:: /auto_examples/parametric/images/sphx_glr_plot_create_image_001.png
   :alt: plot create image
   :srcset: /auto_examples/parametric/images/sphx_glr_plot_create_image_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Calcualted wavelength array: 
    min = 2.32e+03 Angstrom
    max = 1.43e+04 Angstrom
    FilterCollection.lam.size = 11945
    ..................................''''''''''''''''''''''''''''''''..................................
    ............................''''''''''''''''''''''''''''''''''''''''''''............................
    ........................''''''''''''''''''''''''''''''''''''''''''''''''''''........................
    ......................''''''''''''''''''''''''''''''''''''''''''''''''''''''''......................
    ..................''''''''''''''''''''''````````````````````''''''''''''''''''''''..................
    ................''''''''''''''''''````````````````````````````````''''''''''''''''''................
    ..............''''''''''''''''````````````````````````````````````````''''''''''''''''..............
    ............''''''''''''''````````````````^^^^^^^^^^^^^^^^````````````````''''''''''''''............
    ..........''''''''''''''````````````^^^^^^^^^^^^^^^^^^^^^^^^^^^^````````````''''''''''''''..........
    ........''''''''''''''``````````^^^^^^^^^^^^""""""""""""^^^^^^^^^^^^``````````''''''''''''''........
    ........''''''''''''````````^^^^^^^^^^""""""""""""""""""""""""^^^^^^^^^^````````''''''''''''........
    ......''''''''''''````````^^^^^^^^"""""""",,,,,,,,,,,,,,,,""""""""^^^^^^^^````````''''''''''''......
    ....''''''''''''````````^^^^^^"""""""",,,,,,,,::::::::,,,,,,,,""""""""^^^^^^````````''''''''''''....
    ....''''''''''````````^^^^^^"""""",,,,,,::::::::;;;;::::::::,,,,,,""""""^^^^^^````````''''''''''....
    ..''''''''''''``````^^^^^^"""""",,,,::::;;;;;;IIIIIIII;;;;;;::::,,,,""""""^^^^^^``````''''''''''''..
    ..''''''''''````````^^^^"""""",,,,::;;;;IIIIIIllllllllIIIIII;;;;::,,,,""""""^^^^````````''''''''''..
    ..''''''''''``````^^^^^^"""",,,,::;;;;IIllll!!!!!!!!!!!!llllII;;;;::,,,,""""^^^^^^``````''''''''''..
    ''''''''''````````^^^^"""",,,,::;;IIIIll!!ii>>>>>>>>>>>>ii!!llIIII;;::,,,,""""^^^^````````''''''''''
    ''''''''''``````^^^^^^"""",,::;;;;IIll!!>><<~~~~++++~~~~<<>>!!llII;;;;::,,""""^^^^^^``````''''''''''
    ''''''''''``````^^^^"""",,,,::;;IIll!!>><<++__--????--__++<<>>!!llII;;::,,,,""""^^^^``````''''''''''
    ''''''''````````^^^^"""",,::;;IIll!!>><<++--]]}}{{{{}}]]--++<<>>!!llII;;::,,""""^^^^````````''''''''
    ''''''''``````^^^^^^"",,,,::;;IIllii<<++--[[11((tttt((11[[--++<<iillII;;::,,,,""^^^^^^``````''''''''
    ''''''''``````^^^^"""",,,,::;;II!!>>~~__]]11ttxxvvvvxxtt11]]__~~>>!!II;;::,,,,""""^^^^``````''''''''
    ''''''''``````^^^^"""",,::::IIll!!>>~~--}}((xxUUZZZZUUxx((}}--~~>>!!llII::::,,""""^^^^``````''''''''
    ''''''''``````^^^^"""",,::;;IIll!!>>++??{{ttvvZZ$$@@ZZvvtt{{??++>>!!llII;;::,,""""^^^^``````''''''''
    ''''''''``````^^^^"""",,::;;IIll!!>>++??{{ttvvZZ@@@@ZZvvtt{{??++>>!!llII;;::,,""""^^^^``````''''''''
    ''''''''``````^^^^"""",,::::IIll!!>>~~--}}((xxUUZZZZUUxx((}}--~~>>!!llII::::,,""""^^^^``````''''''''
    ''''''''``````^^^^"""",,,,::;;II!!>>~~__]]11ttxxvvvvxxtt11]]__~~>>!!II;;::,,,,""""^^^^``````''''''''
    ''''''''``````^^^^^^"",,,,::;;IIllii<<++--[[11((tttt((11[[--++<<iillII;;::,,,,""^^^^^^``````''''''''
    ''''''''````````^^^^"""",,::;;IIll!!>><<++--]]}}{{{{}}]]--++<<>>!!llII;;::,,""""^^^^````````''''''''
    ''''''''''``````^^^^"""",,,,::;;IIll!!>><<++__--????--__++<<>>!!llII;;::,,,,""""^^^^``````''''''''''
    ''''''''''``````^^^^^^"""",,::;;;;IIll!!>><<~~~~++++~~~~<<>>!!llII;;;;::,,""""^^^^^^``````''''''''''
    ''''''''''````````^^^^"""",,,,::;;IIIIll!!ii>>>>>>>>>>>>ii!!llIIII;;::,,,,""""^^^^````````''''''''''
    ..''''''''''``````^^^^^^"""",,,,::;;;;IIllll!!!!!!!!!!!!llllII;;;;::,,,,""""^^^^^^``````''''''''''..
    ..''''''''''````````^^^^"""""",,,,::;;;;IIIIIIllllllllIIIIII;;;;::,,,,""""""^^^^````````''''''''''..
    ..''''''''''''``````^^^^^^"""""",,,,::::;;;;;;IIIIIIII;;;;;;::::,,,,""""""^^^^^^``````''''''''''''..
    ....''''''''''````````^^^^^^"""""",,,,,,::::::::;;;;::::::::,,,,,,""""""^^^^^^````````''''''''''....
    ....''''''''''''````````^^^^^^"""""""",,,,,,,,::::::::,,,,,,,,""""""""^^^^^^````````''''''''''''....
    ......''''''''''''````````^^^^^^^^"""""""",,,,,,,,,,,,,,,,""""""""^^^^^^^^````````''''''''''''......
    ........''''''''''''````````^^^^^^^^^^""""""""""""""""""""""""^^^^^^^^^^````````''''''''''''........
    ........''''''''''''''``````````^^^^^^^^^^^^""""""""""""^^^^^^^^^^^^``````````''''''''''''''........
    ..........''''''''''''''````````````^^^^^^^^^^^^^^^^^^^^^^^^^^^^````````````''''''''''''''..........
    ............''''''''''''''````````````````^^^^^^^^^^^^^^^^````````````````''''''''''''''............
    ..............''''''''''''''''````````````````````````````````````````''''''''''''''''..............
    ................''''''''''''''''''````````````````````````````````''''''''''''''''''................
    ..................''''''''''''''''''''''````````````````````''''''''''''''''''''''..................
    ......................''''''''''''''''''''''''''''''''''''''''''''''''''''''''......................
    ........................''''''''''''''''''''''''''''''''''''''''''''''''''''........................
    ............................''''''''''''''''''''''''''''''''''''''''''''............................
    ..................................''''''''''''''''''''''''''''''''..................................







|

.. code-block:: default



    import matplotlib.pyplot as plt
    from unyt import kpc, Myr

    from synthesizer.filters import UVJ
    from synthesizer.parametric.galaxy import Galaxy
    from synthesizer.parametric import SFH, ZDist, Stars
    from synthesizer.parametric.morphology import Sersic2D
    from synthesizer.grid import Grid
    from synthesizer.imaging.images import ParametricImage


    if __name__ == "__main__":
        # Define the morphology using a simple effective radius and slope
        morph = Sersic2D(r_eff_kpc=1 * kpc, n=2.0)

        # Get the location of this script, __file__ is the absolute path of this
        # script, however we just want to directory
        # script_path = os.path.abspath(os.path.dirname(__file__))

        # Define the grid
        grid_name = "test_grid"
        grid_dir = "../../tests/test_grid/"
        grid = Grid(grid_name, grid_dir=grid_dir)

        # Define the SFZDist
        Z_p = {"metallicity": 0.01}
        metal_dist = ZDist.DeltaConstant(**Z_p)
        sfh_p = {"duration": 100 * Myr}
        sfh = SFH.Constant(**sfh_p)  # constant star formation
        sfzh = Stars(
            grid.log10age,
            grid.metallicity,
            sf_hist_func=sfh,
            metal_dist_func=metal_dist,
            initial_mass=10**9,
            morphology=morph,
        )

        # Initialise a parametric Galaxy
        galaxy = Galaxy(sfzh)

        # Generate stellar spectra
        galaxy.stars.get_spectra_incident(grid)

        # Get a UVJ filter set
        filters = UVJ()

        # Define geometry of the images
        resolution = 0.05 * kpc  # resolution in kpc
        npix = 50
        fov = resolution.value * npix * kpc

        # Generate images using the low level image methods
        img = ParametricImage(
            morphology=morph,
            resolution=resolution,
            filters=filters,
            sed=galaxy.stars.spectra["incident"],
            fov=fov,
        )

        # Get the photometric images
        img.get_imgs()

        # Make and plot an rgb image
        img.make_rgb_image(rgb_filters={"R": "J", "G": "V", "B": "U"})
        fig, ax, _ = img.plot_rgb_image()

        plt.show()

        # We can also do the same with a helper function on the galaxy object
        img = galaxy.make_images(
            resolution=resolution,
            filters=filters,
            sed=galaxy.stars.spectra["incident"],
            fov=fov,
        )

        # and... print an ASCII representation
        img.print_ascii(filter_code="U")


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 1.280 seconds)


.. _sphx_glr_download_auto_examples_parametric_plot_create_image.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_create_image.py <plot_create_image.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_create_image.ipynb <plot_create_image.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
