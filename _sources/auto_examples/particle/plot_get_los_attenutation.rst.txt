
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/particle/plot_get_los_attenutation.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_particle_plot_get_los_attenutation.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_particle_plot_get_los_attenutation.py:


Plot line of sight diagnostics
==============================

This example shows how to compute line of sight dust surface densities,
and plots some diagnostics.

.. GENERATED FROM PYTHON SOURCE LINES 8-201



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/particle/images/sphx_glr_plot_get_los_attenutation_001.png
         :alt: plot get los attenutation
         :srcset: /auto_examples/particle/images/sphx_glr_plot_get_los_attenutation_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/particle/images/sphx_glr_plot_get_los_attenutation_002.png
         :alt: plot get los attenutation
         :srcset: /auto_examples/particle/images/sphx_glr_plot_get_los_attenutation_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/particle/images/sphx_glr_plot_get_los_attenutation_003.png
         :alt: plot get los attenutation
         :srcset: /auto_examples/particle/images/sphx_glr_plot_get_los_attenutation_003.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/particle/images/sphx_glr_plot_get_los_attenutation_004.png
         :alt: plot get los attenutation
         :srcset: /auto_examples/particle/images/sphx_glr_plot_get_los_attenutation_004.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/runner/work/synthesizer/synthesizer/src/synthesizer/particle/galaxy.py:302: RuntimeWarning: Star forming gas particle mask not provided, setting sf_gas_mass and sf_gas_metallicity to `None`
      self.calculate_integrated_gas_properties()
    /home/runner/work/synthesizer/synthesizer/src/synthesizer/particle/galaxy.py:120: RuntimeWarning: Star forming gas particle mask not provided, setting sf_gas_mass and sf_gas_metallicity to `None`
      self.calculate_integrated_gas_properties()
    LOS calculation with tree took 0.0001 seconds for nstar=10 and ngas=10
    LOS calculation with loop took 0.0001 seconds for nstar=10 and ngas=10
    Ratio in wallclock: Time_loop/Time_tree=1.4404
    Tree gave=0.00 Loop gave=0.00 Normalised residual=0.0000
    LOS calculation with tree took 0.0001 seconds for nstar=10 and ngas=18
    LOS calculation with loop took 0.0001 seconds for nstar=10 and ngas=18
    Ratio in wallclock: Time_loop/Time_tree=1.1890
    Tree gave=0.00 Loop gave=0.00 Normalised residual=0.0000
    LOS calculation with tree took 0.0001 seconds for nstar=10 and ngas=33
    LOS calculation with loop took 0.0001 seconds for nstar=10 and ngas=33
    Ratio in wallclock: Time_loop/Time_tree=1.2103
    Tree gave=0.00 Loop gave=0.00 Normalised residual=0.0000
    LOS calculation with tree took 0.0001 seconds for nstar=10 and ngas=61
    LOS calculation with loop took 0.0001 seconds for nstar=10 and ngas=61
    Ratio in wallclock: Time_loop/Time_tree=1.4423
    Tree gave=0.00 Loop gave=0.00 Normalised residual=0.0000
    LOS calculation with tree took 0.0001 seconds for nstar=10 and ngas=112
    LOS calculation with loop took 0.0001 seconds for nstar=10 and ngas=112
    Ratio in wallclock: Time_loop/Time_tree=1.1881
    Tree gave=0.00 Loop gave=0.00 Normalised residual=0.0000
    LOS calculation with tree took 0.0001 seconds for nstar=10 and ngas=206
    LOS calculation with loop took 0.0001 seconds for nstar=10 and ngas=206
    Ratio in wallclock: Time_loop/Time_tree=1.2184
    Tree gave=0.00 Loop gave=0.00 Normalised residual=0.0000
    LOS calculation with tree took 0.0001 seconds for nstar=10 and ngas=379
    LOS calculation with loop took 0.0001 seconds for nstar=10 and ngas=379
    Ratio in wallclock: Time_loop/Time_tree=1.2674
    Tree gave=0.00 Loop gave=0.00 Normalised residual=0.0000
    LOS calculation with tree took 0.0001 seconds for nstar=10 and ngas=695
    LOS calculation with loop took 0.0001 seconds for nstar=10 and ngas=695
    Ratio in wallclock: Time_loop/Time_tree=1.3342
    Tree gave=0.00 Loop gave=0.00 Normalised residual=0.0000
    LOS calculation with tree took 0.0001 seconds for nstar=10 and ngas=1274
    LOS calculation with loop took 0.0002 seconds for nstar=10 and ngas=1274
    Ratio in wallclock: Time_loop/Time_tree=1.0535
    Tree gave=0.00 Loop gave=0.00 Normalised residual=0.0000
    LOS calculation with tree took 0.0002 seconds for nstar=10 and ngas=2335
    LOS calculation with loop took 0.0002 seconds for nstar=10 and ngas=2335
    Ratio in wallclock: Time_loop/Time_tree=1.1652
    Tree gave=0.00 Loop gave=0.00 Normalised residual=0.0000
    LOS calculation with tree took 0.0003 seconds for nstar=10 and ngas=4281
    LOS calculation with loop took 0.0003 seconds for nstar=10 and ngas=4281
    Ratio in wallclock: Time_loop/Time_tree=1.2132
    Tree gave=0.00 Loop gave=0.00 Normalised residual=0.0000
    LOS calculation with tree took 0.0024 seconds for nstar=10 and ngas=7847
    LOS calculation with loop took 0.0005 seconds for nstar=10 and ngas=7847
    Ratio in wallclock: Time_loop/Time_tree=0.2098
    Tree gave=0.00 Loop gave=0.00 Normalised residual=59.9935
    LOS calculation with tree took 0.0081 seconds for nstar=10 and ngas=14384
    LOS calculation with loop took 0.0008 seconds for nstar=10 and ngas=14384
    Ratio in wallclock: Time_loop/Time_tree=0.0923
    Tree gave=0.00 Loop gave=0.00 Normalised residual=43.8269
    LOS calculation with tree took 0.0120 seconds for nstar=10 and ngas=26366
    LOS calculation with loop took 0.0013 seconds for nstar=10 and ngas=26366
    Ratio in wallclock: Time_loop/Time_tree=0.1118
    Tree gave=0.00 Loop gave=0.00 Normalised residual=59.0202
    LOS calculation with tree took 0.0161 seconds for nstar=10 and ngas=48329
    LOS calculation with loop took 0.0029 seconds for nstar=10 and ngas=48329
    Ratio in wallclock: Time_loop/Time_tree=0.1770
    Tree gave=0.00 Loop gave=0.00 Normalised residual=46.0705
    LOS calculation with tree took 0.0331 seconds for nstar=10 and ngas=88586
    LOS calculation with loop took 0.0048 seconds for nstar=10 and ngas=88586
    Ratio in wallclock: Time_loop/Time_tree=0.1444
    Tree gave=0.00 Loop gave=0.00 Normalised residual=80.7278
    LOS calculation with tree took 0.0453 seconds for nstar=10 and ngas=162377
    LOS calculation with loop took 0.0086 seconds for nstar=10 and ngas=162377
    Ratio in wallclock: Time_loop/Time_tree=0.1890
    Tree gave=0.00 Loop gave=0.00 Normalised residual=67.6243
    LOS calculation with tree took 0.0910 seconds for nstar=10 and ngas=297635
    LOS calculation with loop took 0.0278 seconds for nstar=10 and ngas=297635
    Ratio in wallclock: Time_loop/Time_tree=0.3054
    Tree gave=0.00 Loop gave=0.00 Normalised residual=77.8091
    LOS calculation with tree took 0.1147 seconds for nstar=10 and ngas=545559
    LOS calculation with loop took 0.0372 seconds for nstar=10 and ngas=545559
    Ratio in wallclock: Time_loop/Time_tree=0.3245
    Tree gave=0.00 Loop gave=0.00 Normalised residual=59.4485
    LOS calculation with tree took 0.2012 seconds for nstar=10 and ngas=1000000
    LOS calculation with loop took 0.0630 seconds for nstar=10 and ngas=1000000
    Ratio in wallclock: Time_loop/Time_tree=0.3132
    Tree gave=0.00 Loop gave=0.00 Normalised residual=65.0280
    LOS calculation with tree took 0.0001 seconds for nstar=100 and ngas=100
    LOS calculation with loop took 0.0001 seconds for nstar=100 and ngas=100
    Ratio in wallclock: Time_loop/Time_tree=1.3023
    Tree gave=0.00 Loop gave=0.00 Normalised residual=0.0000
    LOS calculation with tree took 0.0001 seconds for nstar=100 and ngas=162
    LOS calculation with loop took 0.0001 seconds for nstar=100 and ngas=162
    Ratio in wallclock: Time_loop/Time_tree=1.2779
    Tree gave=0.00 Loop gave=0.00 Normalised residual=0.0000
    LOS calculation with tree took 0.0001 seconds for nstar=100 and ngas=263
    LOS calculation with loop took 0.0002 seconds for nstar=100 and ngas=263
    Ratio in wallclock: Time_loop/Time_tree=1.2324
    Tree gave=0.00 Loop gave=0.00 Normalised residual=0.0000
    LOS calculation with tree took 0.0002 seconds for nstar=100 and ngas=428
    LOS calculation with loop took 0.0002 seconds for nstar=100 and ngas=428
    Ratio in wallclock: Time_loop/Time_tree=1.2274
    Tree gave=0.00 Loop gave=0.00 Normalised residual=0.0000
    LOS calculation with tree took 0.0003 seconds for nstar=100 and ngas=695
    LOS calculation with loop took 0.0004 seconds for nstar=100 and ngas=695
    Ratio in wallclock: Time_loop/Time_tree=1.2182
    Tree gave=0.00 Loop gave=0.00 Normalised residual=0.0000
    LOS calculation with tree took 0.0013 seconds for nstar=100 and ngas=1128
    LOS calculation with loop took 0.0005 seconds for nstar=100 and ngas=1128
    Ratio in wallclock: Time_loop/Time_tree=0.4108
    Tree gave=0.00 Loop gave=0.00 Normalised residual=69.2556
    LOS calculation with tree took 0.0022 seconds for nstar=100 and ngas=1832
    LOS calculation with loop took 0.0008 seconds for nstar=100 and ngas=1832
    Ratio in wallclock: Time_loop/Time_tree=0.3818
    Tree gave=0.00 Loop gave=0.00 Normalised residual=62.2751
    LOS calculation with tree took 0.0065 seconds for nstar=100 and ngas=2976
    LOS calculation with loop took 0.0013 seconds for nstar=100 and ngas=2976
    Ratio in wallclock: Time_loop/Time_tree=0.2025
    Tree gave=0.00 Loop gave=0.00 Normalised residual=72.6254
    LOS calculation with tree took 0.0054 seconds for nstar=100 and ngas=4832
    LOS calculation with loop took 0.0021 seconds for nstar=100 and ngas=4832
    Ratio in wallclock: Time_loop/Time_tree=0.3981
    Tree gave=0.00 Loop gave=0.00 Normalised residual=73.3133
    LOS calculation with tree took 0.0077 seconds for nstar=100 and ngas=7847
    LOS calculation with loop took 0.0036 seconds for nstar=100 and ngas=7847
    Ratio in wallclock: Time_loop/Time_tree=0.4642
    Tree gave=0.00 Loop gave=0.00 Normalised residual=59.7566
    LOS calculation with tree took 0.0089 seconds for nstar=100 and ngas=12742
    LOS calculation with loop took 0.0059 seconds for nstar=100 and ngas=12742
    Ratio in wallclock: Time_loop/Time_tree=0.6584
    Tree gave=0.00 Loop gave=0.00 Normalised residual=69.2432
    LOS calculation with tree took 0.0140 seconds for nstar=100 and ngas=20691
    LOS calculation with loop took 0.0096 seconds for nstar=100 and ngas=20691
    Ratio in wallclock: Time_loop/Time_tree=0.6833
    Tree gave=0.00 Loop gave=0.00 Normalised residual=69.2264
    LOS calculation with tree took 0.0135 seconds for nstar=100 and ngas=33598
    LOS calculation with loop took 0.0151 seconds for nstar=100 and ngas=33598
    Ratio in wallclock: Time_loop/Time_tree=1.1183
    Tree gave=0.00 Loop gave=0.00 Normalised residual=64.9058
    LOS calculation with tree took 0.0177 seconds for nstar=100 and ngas=54555
    LOS calculation with loop took 0.0250 seconds for nstar=100 and ngas=54555
    Ratio in wallclock: Time_loop/Time_tree=1.4107
    Tree gave=0.00 Loop gave=0.00 Normalised residual=60.4577
    LOS calculation with tree took 0.1093 seconds for nstar=100 and ngas=88586
    LOS calculation with loop took 0.0471 seconds for nstar=100 and ngas=88586
    Ratio in wallclock: Time_loop/Time_tree=0.4314
    Tree gave=0.00 Loop gave=0.00 Normalised residual=67.4446
    LOS calculation with tree took 0.0441 seconds for nstar=100 and ngas=143844
    LOS calculation with loop took 0.0734 seconds for nstar=100 and ngas=143844
    Ratio in wallclock: Time_loop/Time_tree=1.6653
    Tree gave=0.00 Loop gave=0.00 Normalised residual=65.3061
    LOS calculation with tree took 0.0548 seconds for nstar=100 and ngas=233572
    LOS calculation with loop took 0.1190 seconds for nstar=100 and ngas=233572
    Ratio in wallclock: Time_loop/Time_tree=2.1706
    Tree gave=0.00 Loop gave=0.00 Normalised residual=65.5653
    LOS calculation with tree took 0.1014 seconds for nstar=100 and ngas=379269
    LOS calculation with loop took 0.1925 seconds for nstar=100 and ngas=379269
    Ratio in wallclock: Time_loop/Time_tree=1.8990
    Tree gave=0.00 Loop gave=0.00 Normalised residual=67.8659
    LOS calculation with tree took 0.1672 seconds for nstar=100 and ngas=615848
    LOS calculation with loop took 0.3384 seconds for nstar=100 and ngas=615848
    Ratio in wallclock: Time_loop/Time_tree=2.0236
    Tree gave=0.00 Loop gave=0.00 Normalised residual=65.7053
    LOS calculation with tree took 0.3629 seconds for nstar=100 and ngas=1000000
    LOS calculation with loop took 0.5789 seconds for nstar=100 and ngas=1000000
    Ratio in wallclock: Time_loop/Time_tree=1.5953
    Tree gave=0.00 Loop gave=0.00 Normalised residual=59.5886






|

.. code-block:: Python


    import time

    import matplotlib.pyplot as plt
    import numpy as np
    from synthesizer.grid import Grid
    from synthesizer.parametric import SFH, ZDist
    from synthesizer.parametric import Stars as ParametricStars
    from synthesizer.particle.galaxy import Galaxy
    from synthesizer.particle.gas import Gas
    from synthesizer.particle.particles import CoordinateGenerator
    from synthesizer.particle.stars import sample_sfhz
    from unyt import Myr

    plt.rcParams["font.family"] = "DeJavu Serif"
    plt.rcParams["font.serif"] = ["Times New Roman"]

    # Set the seed
    np.random.seed(42)

    start = time.time()

    # Get the location of this script, __file__ is the absolute path of this
    # script, however we just want to directory
    # script_path = os.path.abspath(os.path.dirname(__file__))

    # Define the grid
    grid_name = "test_grid"
    grid_dir = "../../tests/test_grid/"
    grid = Grid(grid_name, grid_dir=grid_dir)

    # Define the grid (normally this would be defined by an SPS grid)
    log10ages = np.arange(6.0, 10.5, 0.1)
    metallicities = 10 ** np.arange(-5.0, -1.5, 0.1)
    Z_p = {"metallicity": 0.01}
    metal_dist = ZDist.DeltaConstant(**Z_p)
    sfh_p = {"duration": 100 * Myr}
    sfh = SFH.Constant(**sfh_p)  # constant star formation

    # Generate the star formation metallicity history
    mass = 10**10
    param_stars = ParametricStars(
        log10ages,
        metallicities,
        sf_hist=sfh,
        metal_dist=metal_dist,
        initial_mass=mass,
    )

    for n in [10, 100]:  # , 1000, 10000]:
        xs = []
        loop_ys = []
        tree_ys = []
        precision = []
        for ngas in np.logspace(np.log10(n), 6, 20, dtype=int):
            # Make a fake galaxy

            # First make the stars

            # Generate some random coordinates
            coords = CoordinateGenerator.generate_3D_gaussian(n)

            # Calculate the smoothing lengths from radii
            cent = np.mean(coords, axis=0)
            rs = np.sqrt(
                (coords[:, 0] - cent[0]) ** 2
                + (coords[:, 1] - cent[1]) ** 2
                + (coords[:, 2] - cent[2]) ** 2
            )
            rs[rs < 0.2] = 0.6  # Set a lower bound on the "smoothing length"

            # Sample the SFZH, producing a Stars object
            # we will also pass some keyword arguments for attributes
            # we will need for imaging
            stars = sample_sfhz(
                param_stars.sfzh,
                param_stars.log10ages,
                param_stars.log10metallicities,
                n,
                coordinates=coords,
                current_masses=np.full(n, 10**8.7 / n),
                smoothing_lengths=rs / 2,
                redshift=1,
            )

            # Now make the gas

            # Generate some random coordinates
            coords = CoordinateGenerator.generate_3D_gaussian(ngas)

            # Calculate the smoothing lengths from radii
            cent = np.mean(coords, axis=0)
            rs = np.sqrt(
                (coords[:, 0] - cent[0]) ** 2
                + (coords[:, 1] - cent[1]) ** 2
                + (coords[:, 2] - cent[2]) ** 2
            )
            rs[rs < 0.2] = 0.6  # Set a lower bound on the "smoothing length"

            gas = Gas(
                masses=np.random.uniform(10**6, 10**6.5, ngas),
                metallicities=np.random.uniform(0.01, 0.05, ngas),
                coordinates=coords,
                smoothing_lengths=rs / 4,
                dust_to_metal_ratio=0.2,
            )

            # Create galaxy object
            galaxy = Galaxy("Galaxy", stars=stars, gas=gas, redshift=1)

            # Create a fake kernel
            kernel = np.random.normal(0.5, 0.25, 100)
            kernel = np.sort(kernel)[::-1]
            kernel /= np.sum(kernel)

            # Calculate the tau_vs
            start = time.time()
            tau_v = galaxy.calculate_los_tau_v(
                kappa=0.07, kernel=kernel, force_loop=1
            )
            loop_time = time.time() - start
            loop_sum = np.sum(tau_v)

            # Calculate the tau_vs
            start = time.time()
            tau_v = galaxy.calculate_los_tau_v(kappa=0.07, kernel=kernel)
            tree_time = time.time() - start
            tree_sum = np.sum(tau_v)

            xs.append(n * ngas)
            loop_ys.append(loop_time)
            tree_ys.append(tree_time)
            precision.append(np.abs(tree_sum - loop_sum) / loop_sum * 100)

            print(
                f"LOS calculation with tree took {tree_time:.4f} "
                f"seconds for nstar={n} and ngas={ngas}"
            )
            print(
                f"LOS calculation with loop took {loop_time:.4f} "
                f"seconds for nstar={n} and ngas={ngas}"
            )
            print(
                "Ratio in wallclock: "
                f"Time_loop/Time_tree={loop_time / tree_time:.4f}"
            )
            print(
                f"Tree gave={tree_sum:.2f} Loop gave={loop_sum:.2f} "
                "Normalised residual="
                f"{np.abs(tree_sum - loop_sum) / loop_sum * 100:.4f}"
            )

        xs = np.array(xs)
        sinds = np.argsort(xs)
        xs = xs[sinds]
        loop_ys = np.array(loop_ys)[sinds]
        tree_ys = np.array(tree_ys)[sinds]
        precision = np.array(precision)[sinds]

        fig = plt.figure()
        ax = fig.add_subplot(111)
        ax.loglog()
        ax.grid()

        ax.plot(xs, loop_ys, label="Loop")
        ax.plot(xs, tree_ys, label="Tree")

        ax.set_ylabel("Wallclock (s)")
        ax.set_xlabel(r"$N_\star N_\mathrm{gas}$")

        ax.legend()

        plt.show()
        # fig.savefig("../los_timing_nstar%d.png" % n,
        #     dpi=100, bbox_inches="tight")

        fig = plt.figure()
        ax = fig.add_subplot(111)
        ax.semilogx()
        ax.grid()

        ax.plot(xs, precision, label="Loop / Tree")

        ax.set_ylabel(
            r"$|\tau_{V, tree} - \tau_{V, loop}|" r" / \tau_{V, loop}$ (%)"
        )
        ax.set_xlabel("$N_\\star N_\\mathrm{gas}$")

        ax.legend()

        # fig.savefig("../los_precision_nstar%d.png" % n,
        #     dpi=100, bbox_inches="tight")
        plt.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 4.839 seconds)


.. _sphx_glr_download_auto_examples_particle_plot_get_los_attenutation.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_get_los_attenutation.ipynb <plot_get_los_attenutation.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_get_los_attenutation.py <plot_get_los_attenutation.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
