
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/particle/plot_get_los_attenutation.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_particle_plot_get_los_attenutation.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_particle_plot_get_los_attenutation.py:


Plot line of sight diagnostics
==============================

This example shows how to compute line of sight dust surface densities,
and plots some diagnostics.

.. GENERATED FROM PYTHON SOURCE LINES 8-201



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/particle/images/sphx_glr_plot_get_los_attenutation_001.png
         :alt: plot get los attenutation
         :srcset: /auto_examples/particle/images/sphx_glr_plot_get_los_attenutation_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/particle/images/sphx_glr_plot_get_los_attenutation_002.png
         :alt: plot get los attenutation
         :srcset: /auto_examples/particle/images/sphx_glr_plot_get_los_attenutation_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/particle/images/sphx_glr_plot_get_los_attenutation_003.png
         :alt: plot get los attenutation
         :srcset: /auto_examples/particle/images/sphx_glr_plot_get_los_attenutation_003.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/particle/images/sphx_glr_plot_get_los_attenutation_004.png
         :alt: plot get los attenutation
         :srcset: /auto_examples/particle/images/sphx_glr_plot_get_los_attenutation_004.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LOS calculation with tree took 0.0001 seconds for nstar=10 and ngas=10
    LOS calculation with loop took 0.0001 seconds for nstar=10 and ngas=10
    Ratio in wallclock: Time_loop/Time_tree=1.3539
    Tree gave=0.00 Loop gave=0.00 Normalised residual=0.0000
    LOS calculation with tree took 0.0001 seconds for nstar=10 and ngas=18
    LOS calculation with loop took 0.0001 seconds for nstar=10 and ngas=18
    Ratio in wallclock: Time_loop/Time_tree=1.1837
    Tree gave=0.00 Loop gave=0.00 Normalised residual=0.0000
    LOS calculation with tree took 0.0001 seconds for nstar=10 and ngas=33
    LOS calculation with loop took 0.0001 seconds for nstar=10 and ngas=33
    Ratio in wallclock: Time_loop/Time_tree=1.3364
    Tree gave=0.00 Loop gave=0.00 Normalised residual=0.0000
    LOS calculation with tree took 0.0001 seconds for nstar=10 and ngas=61
    LOS calculation with loop took 0.0001 seconds for nstar=10 and ngas=61
    Ratio in wallclock: Time_loop/Time_tree=1.1607
    Tree gave=0.00 Loop gave=0.00 Normalised residual=0.0000
    LOS calculation with tree took 0.0001 seconds for nstar=10 and ngas=112
    LOS calculation with loop took 0.0001 seconds for nstar=10 and ngas=112
    Ratio in wallclock: Time_loop/Time_tree=1.1827
    Tree gave=0.00 Loop gave=0.00 Normalised residual=0.0000
    LOS calculation with tree took 0.0001 seconds for nstar=10 and ngas=206
    LOS calculation with loop took 0.0001 seconds for nstar=10 and ngas=206
    Ratio in wallclock: Time_loop/Time_tree=1.0599
    Tree gave=0.00 Loop gave=0.00 Normalised residual=0.0000
    LOS calculation with tree took 0.0001 seconds for nstar=10 and ngas=379
    LOS calculation with loop took 0.0001 seconds for nstar=10 and ngas=379
    Ratio in wallclock: Time_loop/Time_tree=1.2507
    Tree gave=0.00 Loop gave=0.00 Normalised residual=0.0000
    LOS calculation with tree took 0.0001 seconds for nstar=10 and ngas=695
    LOS calculation with loop took 0.0001 seconds for nstar=10 and ngas=695
    Ratio in wallclock: Time_loop/Time_tree=1.2914
    Tree gave=0.00 Loop gave=0.00 Normalised residual=0.0000
    LOS calculation with tree took 0.0001 seconds for nstar=10 and ngas=1274
    LOS calculation with loop took 0.0002 seconds for nstar=10 and ngas=1274
    Ratio in wallclock: Time_loop/Time_tree=1.3786
    Tree gave=0.00 Loop gave=0.00 Normalised residual=0.0000
    LOS calculation with tree took 0.0002 seconds for nstar=10 and ngas=2335
    LOS calculation with loop took 0.0002 seconds for nstar=10 and ngas=2335
    Ratio in wallclock: Time_loop/Time_tree=1.1868
    Tree gave=0.00 Loop gave=0.00 Normalised residual=0.0000
    LOS calculation with tree took 0.0003 seconds for nstar=10 and ngas=4281
    LOS calculation with loop took 0.0004 seconds for nstar=10 and ngas=4281
    Ratio in wallclock: Time_loop/Time_tree=1.1507
    Tree gave=0.00 Loop gave=0.00 Normalised residual=0.0000
    LOS calculation with tree took 0.0022 seconds for nstar=10 and ngas=7847
    LOS calculation with loop took 0.0005 seconds for nstar=10 and ngas=7847
    Ratio in wallclock: Time_loop/Time_tree=0.2442
    Tree gave=0.00 Loop gave=0.00 Normalised residual=0.0000
    LOS calculation with tree took 0.0086 seconds for nstar=10 and ngas=14384
    LOS calculation with loop took 0.0011 seconds for nstar=10 and ngas=14384
    Ratio in wallclock: Time_loop/Time_tree=0.1268
    Tree gave=0.00 Loop gave=0.00 Normalised residual=0.0000
    LOS calculation with tree took 0.0119 seconds for nstar=10 and ngas=26366
    LOS calculation with loop took 0.0014 seconds for nstar=10 and ngas=26366
    Ratio in wallclock: Time_loop/Time_tree=0.1211
    Tree gave=0.00 Loop gave=0.00 Normalised residual=0.0000
    LOS calculation with tree took 0.0200 seconds for nstar=10 and ngas=48329
    LOS calculation with loop took 0.0038 seconds for nstar=10 and ngas=48329
    Ratio in wallclock: Time_loop/Time_tree=0.1900
    Tree gave=0.00 Loop gave=0.00 Normalised residual=0.0000
    LOS calculation with tree took 0.0330 seconds for nstar=10 and ngas=88586
    LOS calculation with loop took 0.0058 seconds for nstar=10 and ngas=88586
    Ratio in wallclock: Time_loop/Time_tree=0.1769
    Tree gave=0.00 Loop gave=0.00 Normalised residual=0.0000
    LOS calculation with tree took 0.0450 seconds for nstar=10 and ngas=162377
    LOS calculation with loop took 0.0094 seconds for nstar=10 and ngas=162377
    Ratio in wallclock: Time_loop/Time_tree=0.2092
    Tree gave=0.00 Loop gave=0.00 Normalised residual=0.0000
    LOS calculation with tree took 0.0887 seconds for nstar=10 and ngas=297635
    LOS calculation with loop took 0.0190 seconds for nstar=10 and ngas=297635
    Ratio in wallclock: Time_loop/Time_tree=0.2141
    Tree gave=0.00 Loop gave=0.00 Normalised residual=0.0001
    LOS calculation with tree took 0.1534 seconds for nstar=10 and ngas=545559
    LOS calculation with loop took 0.0475 seconds for nstar=10 and ngas=545559
    Ratio in wallclock: Time_loop/Time_tree=0.3095
    Tree gave=0.00 Loop gave=0.00 Normalised residual=0.0003
    LOS calculation with tree took 0.2043 seconds for nstar=10 and ngas=1000000
    LOS calculation with loop took 0.0576 seconds for nstar=10 and ngas=1000000
    Ratio in wallclock: Time_loop/Time_tree=0.2819
    Tree gave=0.00 Loop gave=0.00 Normalised residual=0.0005
    LOS calculation with tree took 0.0001 seconds for nstar=100 and ngas=100
    LOS calculation with loop took 0.0001 seconds for nstar=100 and ngas=100
    Ratio in wallclock: Time_loop/Time_tree=1.1959
    Tree gave=0.00 Loop gave=0.00 Normalised residual=0.0000
    LOS calculation with tree took 0.0001 seconds for nstar=100 and ngas=162
    LOS calculation with loop took 0.0002 seconds for nstar=100 and ngas=162
    Ratio in wallclock: Time_loop/Time_tree=1.1458
    Tree gave=0.00 Loop gave=0.00 Normalised residual=0.0000
    LOS calculation with tree took 0.0002 seconds for nstar=100 and ngas=263
    LOS calculation with loop took 0.0002 seconds for nstar=100 and ngas=263
    Ratio in wallclock: Time_loop/Time_tree=1.2242
    Tree gave=0.00 Loop gave=0.00 Normalised residual=0.0000
    LOS calculation with tree took 0.0003 seconds for nstar=100 and ngas=428
    LOS calculation with loop took 0.0003 seconds for nstar=100 and ngas=428
    Ratio in wallclock: Time_loop/Time_tree=1.0421
    Tree gave=0.00 Loop gave=0.00 Normalised residual=0.0000
    LOS calculation with tree took 0.0003 seconds for nstar=100 and ngas=695
    LOS calculation with loop took 0.0004 seconds for nstar=100 and ngas=695
    Ratio in wallclock: Time_loop/Time_tree=1.2120
    Tree gave=0.00 Loop gave=0.00 Normalised residual=0.0000
    LOS calculation with tree took 0.0014 seconds for nstar=100 and ngas=1128
    LOS calculation with loop took 0.0006 seconds for nstar=100 and ngas=1128
    Ratio in wallclock: Time_loop/Time_tree=0.4242
    Tree gave=0.00 Loop gave=0.00 Normalised residual=0.0000
    LOS calculation with tree took 0.0022 seconds for nstar=100 and ngas=1832
    LOS calculation with loop took 0.0010 seconds for nstar=100 and ngas=1832
    Ratio in wallclock: Time_loop/Time_tree=0.4268
    Tree gave=0.00 Loop gave=0.00 Normalised residual=0.0000
    LOS calculation with tree took 0.0068 seconds for nstar=100 and ngas=2976
    LOS calculation with loop took 0.0015 seconds for nstar=100 and ngas=2976
    Ratio in wallclock: Time_loop/Time_tree=0.2185
    Tree gave=0.00 Loop gave=0.00 Normalised residual=0.0000
    LOS calculation with tree took 0.0057 seconds for nstar=100 and ngas=4832
    LOS calculation with loop took 0.0025 seconds for nstar=100 and ngas=4832
    Ratio in wallclock: Time_loop/Time_tree=0.4376
    Tree gave=0.00 Loop gave=0.00 Normalised residual=0.0000
    LOS calculation with tree took 0.0082 seconds for nstar=100 and ngas=7847
    LOS calculation with loop took 0.0042 seconds for nstar=100 and ngas=7847
    Ratio in wallclock: Time_loop/Time_tree=0.5146
    Tree gave=0.00 Loop gave=0.00 Normalised residual=0.0000
    LOS calculation with tree took 0.0099 seconds for nstar=100 and ngas=12742
    LOS calculation with loop took 0.0067 seconds for nstar=100 and ngas=12742
    Ratio in wallclock: Time_loop/Time_tree=0.6791
    Tree gave=0.00 Loop gave=0.00 Normalised residual=0.0000
    LOS calculation with tree took 0.0153 seconds for nstar=100 and ngas=20691
    LOS calculation with loop took 0.0109 seconds for nstar=100 and ngas=20691
    Ratio in wallclock: Time_loop/Time_tree=0.7131
    Tree gave=0.00 Loop gave=0.00 Normalised residual=0.0000
    LOS calculation with tree took 0.0187 seconds for nstar=100 and ngas=33598
    LOS calculation with loop took 0.0205 seconds for nstar=100 and ngas=33598
    Ratio in wallclock: Time_loop/Time_tree=1.0969
    Tree gave=0.00 Loop gave=0.00 Normalised residual=0.0000
    LOS calculation with tree took 0.0253 seconds for nstar=100 and ngas=54555
    LOS calculation with loop took 0.0339 seconds for nstar=100 and ngas=54555
    Ratio in wallclock: Time_loop/Time_tree=1.3359
    Tree gave=0.00 Loop gave=0.00 Normalised residual=0.0000
    LOS calculation with tree took 0.0414 seconds for nstar=100 and ngas=88586
    LOS calculation with loop took 0.0545 seconds for nstar=100 and ngas=88586
    Ratio in wallclock: Time_loop/Time_tree=1.3180
    Tree gave=0.00 Loop gave=0.00 Normalised residual=0.0000
    LOS calculation with tree took 0.1353 seconds for nstar=100 and ngas=143844
    LOS calculation with loop took 0.0850 seconds for nstar=100 and ngas=143844
    Ratio in wallclock: Time_loop/Time_tree=0.6282
    Tree gave=0.00 Loop gave=0.00 Normalised residual=0.0000
    LOS calculation with tree took 0.0641 seconds for nstar=100 and ngas=233572
    LOS calculation with loop took 0.1359 seconds for nstar=100 and ngas=233572
    Ratio in wallclock: Time_loop/Time_tree=2.1209
    Tree gave=0.00 Loop gave=0.00 Normalised residual=0.0000
    LOS calculation with tree took 0.1256 seconds for nstar=100 and ngas=379269
    LOS calculation with loop took 0.2010 seconds for nstar=100 and ngas=379269
    Ratio in wallclock: Time_loop/Time_tree=1.6010
    Tree gave=0.00 Loop gave=0.00 Normalised residual=0.0002
    LOS calculation with tree took 0.2117 seconds for nstar=100 and ngas=615848
    LOS calculation with loop took 0.3151 seconds for nstar=100 and ngas=615848
    Ratio in wallclock: Time_loop/Time_tree=1.4885
    Tree gave=0.00 Loop gave=0.00 Normalised residual=0.0000
    LOS calculation with tree took 0.4163 seconds for nstar=100 and ngas=1000000
    LOS calculation with loop took 0.5256 seconds for nstar=100 and ngas=1000000
    Ratio in wallclock: Time_loop/Time_tree=1.2624
    Tree gave=0.00 Loop gave=0.00 Normalised residual=0.0003






|

.. code-block:: Python

    import time
    import numpy as np
    import matplotlib.pyplot as plt
    from unyt import Myr

    from synthesizer.grid import Grid
    from synthesizer.parametric import SFH, ZDist
    from synthesizer.parametric import Stars as ParametricStars
    from synthesizer.particle.stars import sample_sfhz
    from synthesizer.particle.gas import Gas
    from synthesizer.particle.galaxy import Galaxy
    from synthesizer.particle.particles import CoordinateGenerator


    plt.rcParams["font.family"] = "DeJavu Serif"
    plt.rcParams["font.serif"] = ["Times New Roman"]

    # Set the seed
    np.random.seed(42)

    start = time.time()

    # Get the location of this script, __file__ is the absolute path of this
    # script, however we just want to directory
    # script_path = os.path.abspath(os.path.dirname(__file__))

    # Define the grid
    grid_name = "test_grid"
    grid_dir = "../../tests/test_grid/"
    grid = Grid(grid_name, grid_dir=grid_dir)

    # Define the grid (normally this would be defined by an SPS grid)
    log10ages = np.arange(6.0, 10.5, 0.1)
    metallicities = 10 ** np.arange(-5.0, -1.5, 0.1)
    Z_p = {"metallicity": 0.01}
    metal_dist = ZDist.DeltaConstant(**Z_p)
    sfh_p = {"duration": 100 * Myr}
    sfh = SFH.Constant(**sfh_p)  # constant star formation

    # Generate the star formation metallicity history
    mass = 10**10
    param_stars = ParametricStars(
        log10ages,
        metallicities,
        sf_hist=sfh,
        metal_dist=metal_dist,
        initial_mass=mass,
    )

    for n in [10, 100]:  # , 1000, 10000]:
        xs = []
        loop_ys = []
        tree_ys = []
        precision = []
        for ngas in np.logspace(np.log10(n), 6, 20, dtype=int):
            # Make a fake galaxy

            # First make the stars

            # Generate some random coordinates
            coords = CoordinateGenerator.generate_3D_gaussian(n)

            # Calculate the smoothing lengths from radii
            cent = np.mean(coords, axis=0)
            rs = np.sqrt(
                (coords[:, 0] - cent[0]) ** 2
                + (coords[:, 1] - cent[1]) ** 2
                + (coords[:, 2] - cent[2]) ** 2
            )
            rs[rs < 0.2] = 0.6  # Set a lower bound on the "smoothing length"

            # Sample the SFZH, producing a Stars object
            # we will also pass some keyword arguments for attributes
            # we will need for imaging
            stars = sample_sfhz(
                param_stars.sfzh,
                param_stars.log10ages,
                param_stars.log10metallicities,
                n,
                coordinates=coords,
                current_masses=np.full(n, 10**8.7 / n),
                smoothing_lengths=rs / 2,
                redshift=1,
            )

            # Now make the gas

            # Generate some random coordinates
            coords = CoordinateGenerator.generate_3D_gaussian(ngas)

            # Calculate the smoothing lengths from radii
            cent = np.mean(coords, axis=0)
            rs = np.sqrt(
                (coords[:, 0] - cent[0]) ** 2
                + (coords[:, 1] - cent[1]) ** 2
                + (coords[:, 2] - cent[2]) ** 2
            )
            rs[rs < 0.2] = 0.6  # Set a lower bound on the "smoothing length"

            gas = Gas(
                masses=np.random.uniform(10**6, 10**6.5, ngas),
                metallicities=np.random.uniform(0.01, 0.05, ngas),
                coordinates=coords,
                smoothing_lengths=rs / 4,
                dust_to_metal_ratio=0.2,
            )

            # Create galaxy object
            galaxy = Galaxy("Galaxy", stars=stars, gas=gas, redshift=1)

            # Create a fake kernel
            kernel = np.random.normal(0.5, 0.25, 100)
            kernel = np.sort(kernel)[::-1]
            kernel /= np.sum(kernel)

            # Calculate the tau_vs
            start = time.time()
            tau_v = galaxy.calculate_los_tau_v(
                kappa=0.07, kernel=kernel, force_loop=1
            )
            loop_time = time.time() - start
            loop_sum = np.sum(tau_v)

            # Calculate the tau_vs
            start = time.time()
            tau_v = galaxy.calculate_los_tau_v(kappa=0.07, kernel=kernel)
            tree_time = time.time() - start
            tree_sum = np.sum(tau_v)

            xs.append(n * ngas)
            loop_ys.append(loop_time)
            tree_ys.append(tree_time)
            precision.append(np.abs(tree_sum - loop_sum) / loop_sum * 100)

            print(
                f"LOS calculation with tree took {tree_time:.4f} "
                f"seconds for nstar={n} and ngas={ngas}"
            )
            print(
                f"LOS calculation with loop took {loop_time:.4f} "
                f"seconds for nstar={n} and ngas={ngas}"
            )
            print(
                "Ratio in wallclock: "
                f"Time_loop/Time_tree={loop_time / tree_time:.4f}"
            )
            print(
                f"Tree gave={tree_sum:.2f} Loop gave={loop_sum:.2f} "
                "Normalised residual="
                f"{np.abs(tree_sum - loop_sum) / loop_sum * 100:.4f}"
            )

        xs = np.array(xs)
        sinds = np.argsort(xs)
        xs = xs[sinds]
        loop_ys = np.array(loop_ys)[sinds]
        tree_ys = np.array(tree_ys)[sinds]
        precision = np.array(precision)[sinds]

        fig = plt.figure()
        ax = fig.add_subplot(111)
        ax.loglog()
        ax.grid()

        ax.plot(xs, loop_ys, label="Loop")
        ax.plot(xs, tree_ys, label="Tree")

        ax.set_ylabel("Wallclock (s)")
        ax.set_xlabel(r"$N_\star N_\mathrm{gas}$")

        ax.legend()

        plt.show()
        # fig.savefig("../los_timing_nstar%d.png" % n,
        #     dpi=100, bbox_inches="tight")

        fig = plt.figure()
        ax = fig.add_subplot(111)
        ax.semilogx()
        ax.grid()

        ax.plot(xs, precision, label="Loop / Tree")

        ax.set_ylabel(
            r"$|\tau_{V, tree} - \tau_{V, loop}|" r" / \tau_{V, loop}$ (%)"
        )
        ax.set_xlabel("$N_\\star N_\\mathrm{gas}$")

        ax.legend()

        # fig.savefig("../los_precision_nstar%d.png" % n,
        #     dpi=100, bbox_inches="tight")
        plt.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 4.942 seconds)


.. _sphx_glr_download_auto_examples_particle_plot_get_los_attenutation.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_get_los_attenutation.ipynb <plot_get_los_attenutation.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_get_los_attenutation.py <plot_get_los_attenutation.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
