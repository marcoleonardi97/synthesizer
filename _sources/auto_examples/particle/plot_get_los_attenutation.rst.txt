
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/particle/plot_get_los_attenutation.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_particle_plot_get_los_attenutation.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_particle_plot_get_los_attenutation.py:


Plot line of sight diagnostics
==============================

This example shows how to compute line of sight dust surface densities,
and plots some diagnostics.

.. GENERATED FROM PYTHON SOURCE LINES 8-196



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/particle/images/sphx_glr_plot_get_los_attenutation_001.png
         :alt: plot get los attenutation
         :srcset: /auto_examples/particle/images/sphx_glr_plot_get_los_attenutation_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/particle/images/sphx_glr_plot_get_los_attenutation_002.png
         :alt: plot get los attenutation
         :srcset: /auto_examples/particle/images/sphx_glr_plot_get_los_attenutation_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/particle/images/sphx_glr_plot_get_los_attenutation_003.png
         :alt: plot get los attenutation
         :srcset: /auto_examples/particle/images/sphx_glr_plot_get_los_attenutation_003.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/particle/images/sphx_glr_plot_get_los_attenutation_004.png
         :alt: plot get los attenutation
         :srcset: /auto_examples/particle/images/sphx_glr_plot_get_los_attenutation_004.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LOS calculation with tree took 0.0001 seconds for nstar=10 and ngas=10
    LOS calculation with loop took 0.0004 seconds for nstar=10 and ngas=10
    Ratio in wallclock: Time_loop/Time_tree=5.1190
    Tree gave=16.56 Loop gave=16.56 Normalised residual=0.0000%
    LOS calculation with tree took 0.0001 seconds for nstar=10 and ngas=18
    LOS calculation with loop took 0.0001 seconds for nstar=10 and ngas=18
    Ratio in wallclock: Time_loop/Time_tree=1.3611
    Tree gave=398.20 Loop gave=398.20 Normalised residual=0.0000%
    LOS calculation with tree took 0.0001 seconds for nstar=10 and ngas=33
    LOS calculation with loop took 0.0001 seconds for nstar=10 and ngas=33
    Ratio in wallclock: Time_loop/Time_tree=1.1809
    Tree gave=199.75 Loop gave=199.75 Normalised residual=0.0000%
    LOS calculation with tree took 0.0001 seconds for nstar=10 and ngas=61
    LOS calculation with loop took 0.0001 seconds for nstar=10 and ngas=61
    Ratio in wallclock: Time_loop/Time_tree=1.1869
    Tree gave=414.47 Loop gave=414.47 Normalised residual=0.0000%
    LOS calculation with tree took 0.0001 seconds for nstar=10 and ngas=112
    LOS calculation with loop took 0.0001 seconds for nstar=10 and ngas=112
    Ratio in wallclock: Time_loop/Time_tree=1.2712
    Tree gave=1059.78 Loop gave=1059.78 Normalised residual=0.0000%
    LOS calculation with tree took 0.0001 seconds for nstar=10 and ngas=206
    LOS calculation with loop took 0.0001 seconds for nstar=10 and ngas=206
    Ratio in wallclock: Time_loop/Time_tree=1.3112
    Tree gave=2643.46 Loop gave=2643.46 Normalised residual=0.0000%
    LOS calculation with tree took 0.0001 seconds for nstar=10 and ngas=379
    LOS calculation with loop took 0.0001 seconds for nstar=10 and ngas=379
    Ratio in wallclock: Time_loop/Time_tree=1.3770
    Tree gave=2632.27 Loop gave=2632.27 Normalised residual=0.0000%
    LOS calculation with tree took 0.0001 seconds for nstar=10 and ngas=695
    LOS calculation with loop took 0.0002 seconds for nstar=10 and ngas=695
    Ratio in wallclock: Time_loop/Time_tree=1.3760
    Tree gave=7055.72 Loop gave=7055.72 Normalised residual=0.0000%
    LOS calculation with tree took 0.0002 seconds for nstar=10 and ngas=1274
    LOS calculation with loop took 0.0002 seconds for nstar=10 and ngas=1274
    Ratio in wallclock: Time_loop/Time_tree=1.1823
    Tree gave=16139.25 Loop gave=16139.25 Normalised residual=0.0000%
    LOS calculation with tree took 0.0003 seconds for nstar=10 and ngas=2335
    LOS calculation with loop took 0.0003 seconds for nstar=10 and ngas=2335
    Ratio in wallclock: Time_loop/Time_tree=1.2617
    Tree gave=19740.39 Loop gave=19740.39 Normalised residual=0.0000%
    LOS calculation with tree took 0.0006 seconds for nstar=10 and ngas=4281
    LOS calculation with loop took 0.0006 seconds for nstar=10 and ngas=4281
    Ratio in wallclock: Time_loop/Time_tree=1.0406
    Tree gave=59515.21 Loop gave=59515.21 Normalised residual=0.0000%
    LOS calculation with tree took 0.0019 seconds for nstar=10 and ngas=7847
    LOS calculation with loop took 0.0009 seconds for nstar=10 and ngas=7847
    Ratio in wallclock: Time_loop/Time_tree=0.4818
    Tree gave=58918.11 Loop gave=58918.11 Normalised residual=0.0000%
    LOS calculation with tree took 0.0031 seconds for nstar=10 and ngas=14384
    LOS calculation with loop took 0.0019 seconds for nstar=10 and ngas=14384
    Ratio in wallclock: Time_loop/Time_tree=0.6249
    Tree gave=192629.09 Loop gave=192629.09 Normalised residual=0.0000%
    LOS calculation with tree took 0.0106 seconds for nstar=10 and ngas=26366
    LOS calculation with loop took 0.0027 seconds for nstar=10 and ngas=26366
    Ratio in wallclock: Time_loop/Time_tree=0.2583
    Tree gave=455156.50 Loop gave=455156.50 Normalised residual=0.0000%
    LOS calculation with tree took 0.0179 seconds for nstar=10 and ngas=48329
    LOS calculation with loop took 0.0065 seconds for nstar=10 and ngas=48329
    Ratio in wallclock: Time_loop/Time_tree=0.3637
    Tree gave=656096.29 Loop gave=656096.29 Normalised residual=0.0000%
    LOS calculation with tree took 0.0324 seconds for nstar=10 and ngas=88586
    LOS calculation with loop took 0.0098 seconds for nstar=10 and ngas=88586
    Ratio in wallclock: Time_loop/Time_tree=0.3038
    Tree gave=1277638.36 Loop gave=1277638.36 Normalised residual=0.0000%
    LOS calculation with tree took 0.0458 seconds for nstar=10 and ngas=162377
    LOS calculation with loop took 0.0113 seconds for nstar=10 and ngas=162377
    Ratio in wallclock: Time_loop/Time_tree=0.2458
    Tree gave=733094.54 Loop gave=733094.54 Normalised residual=0.0000%
    LOS calculation with tree took 0.0879 seconds for nstar=10 and ngas=297635
    LOS calculation with loop took 0.0274 seconds for nstar=10 and ngas=297635
    Ratio in wallclock: Time_loop/Time_tree=0.3118
    Tree gave=2912772.65 Loop gave=2912770.84 Normalised residual=0.0001%
    LOS calculation with tree took 0.1162 seconds for nstar=10 and ngas=545559
    LOS calculation with loop took 0.0637 seconds for nstar=10 and ngas=545559
    Ratio in wallclock: Time_loop/Time_tree=0.5486
    Tree gave=6760031.68 Loop gave=6760058.40 Normalised residual=0.0004%
    LOS calculation with tree took 0.2068 seconds for nstar=10 and ngas=1000000
    LOS calculation with loop took 0.0958 seconds for nstar=10 and ngas=1000000
    Ratio in wallclock: Time_loop/Time_tree=0.4633
    Tree gave=10745498.72 Loop gave=10745501.57 Normalised residual=0.0000%
    LOS calculation with tree took 0.0001 seconds for nstar=100 and ngas=100
    LOS calculation with loop took 0.0002 seconds for nstar=100 and ngas=100
    Ratio in wallclock: Time_loop/Time_tree=1.4158
    Tree gave=8696.39 Loop gave=8696.39 Normalised residual=0.0000%
    LOS calculation with tree took 0.0002 seconds for nstar=100 and ngas=162
    LOS calculation with loop took 0.0003 seconds for nstar=100 and ngas=162
    Ratio in wallclock: Time_loop/Time_tree=1.2749
    Tree gave=21809.26 Loop gave=21809.26 Normalised residual=0.0000%
    LOS calculation with tree took 0.0003 seconds for nstar=100 and ngas=263
    LOS calculation with loop took 0.0004 seconds for nstar=100 and ngas=263
    Ratio in wallclock: Time_loop/Time_tree=1.1277
    Tree gave=31364.13 Loop gave=31364.13 Normalised residual=0.0000%
    LOS calculation with tree took 0.0005 seconds for nstar=100 and ngas=428
    LOS calculation with loop took 0.0006 seconds for nstar=100 and ngas=428
    Ratio in wallclock: Time_loop/Time_tree=1.1363
    Tree gave=49572.28 Loop gave=49572.28 Normalised residual=0.0000%
    LOS calculation with tree took 0.0008 seconds for nstar=100 and ngas=695
    LOS calculation with loop took 0.0009 seconds for nstar=100 and ngas=695
    Ratio in wallclock: Time_loop/Time_tree=1.1128
    Tree gave=76260.99 Loop gave=76260.99 Normalised residual=0.0000%
    LOS calculation with tree took 0.0015 seconds for nstar=100 and ngas=1128
    LOS calculation with loop took 0.0013 seconds for nstar=100 and ngas=1128
    Ratio in wallclock: Time_loop/Time_tree=0.8479
    Tree gave=116114.16 Loop gave=116114.16 Normalised residual=0.0000%
    LOS calculation with tree took 0.0026 seconds for nstar=100 and ngas=1832
    LOS calculation with loop took 0.0021 seconds for nstar=100 and ngas=1832
    Ratio in wallclock: Time_loop/Time_tree=0.8025
    Tree gave=213187.68 Loop gave=213187.68 Normalised residual=0.0000%
    LOS calculation with tree took 0.0073 seconds for nstar=100 and ngas=2976
    LOS calculation with loop took 0.0031 seconds for nstar=100 and ngas=2976
    Ratio in wallclock: Time_loop/Time_tree=0.4325
    Tree gave=310167.99 Loop gave=310167.99 Normalised residual=0.0000%
    LOS calculation with tree took 0.0065 seconds for nstar=100 and ngas=4832
    LOS calculation with loop took 0.0053 seconds for nstar=100 and ngas=4832
    Ratio in wallclock: Time_loop/Time_tree=0.8149
    Tree gave=523685.51 Loop gave=523685.51 Normalised residual=0.0000%
    LOS calculation with tree took 0.0095 seconds for nstar=100 and ngas=7847
    LOS calculation with loop took 0.0084 seconds for nstar=100 and ngas=7847
    Ratio in wallclock: Time_loop/Time_tree=0.8899
    Tree gave=913118.55 Loop gave=913118.55 Normalised residual=0.0000%
    LOS calculation with tree took 0.0121 seconds for nstar=100 and ngas=12742
    LOS calculation with loop took 0.0133 seconds for nstar=100 and ngas=12742
    Ratio in wallclock: Time_loop/Time_tree=1.0979
    Tree gave=1487476.58 Loop gave=1487476.58 Normalised residual=0.0000%
    LOS calculation with tree took 0.0181 seconds for nstar=100 and ngas=20691
    LOS calculation with loop took 0.0215 seconds for nstar=100 and ngas=20691
    Ratio in wallclock: Time_loop/Time_tree=1.1869
    Tree gave=2427852.45 Loop gave=2427852.45 Normalised residual=0.0000%
    LOS calculation with tree took 0.0222 seconds for nstar=100 and ngas=33598
    LOS calculation with loop took 0.0348 seconds for nstar=100 and ngas=33598
    Ratio in wallclock: Time_loop/Time_tree=1.5652
    Tree gave=4142298.54 Loop gave=4142298.54 Normalised residual=0.0000%
    LOS calculation with tree took 0.0291 seconds for nstar=100 and ngas=54555
    LOS calculation with loop took 0.0556 seconds for nstar=100 and ngas=54555
    Ratio in wallclock: Time_loop/Time_tree=1.9074
    Tree gave=6364913.16 Loop gave=6364913.16 Normalised residual=0.0000%
    LOS calculation with tree took 0.0405 seconds for nstar=100 and ngas=88586
    LOS calculation with loop took 0.0882 seconds for nstar=100 and ngas=88586
    Ratio in wallclock: Time_loop/Time_tree=2.1762
    Tree gave=9433748.52 Loop gave=9433748.52 Normalised residual=0.0000%
    LOS calculation with tree took 0.0499 seconds for nstar=100 and ngas=143844
    LOS calculation with loop took 0.1428 seconds for nstar=100 and ngas=143844
    Ratio in wallclock: Time_loop/Time_tree=2.8612
    Tree gave=17126590.86 Loop gave=17126590.86 Normalised residual=0.0000%
    LOS calculation with tree took 0.0675 seconds for nstar=100 and ngas=233572
    LOS calculation with loop took 0.3011 seconds for nstar=100 and ngas=233572
    Ratio in wallclock: Time_loop/Time_tree=4.4615
    Tree gave=25821291.75 Loop gave=25821291.75 Normalised residual=0.0000%
    LOS calculation with tree took 0.1187 seconds for nstar=100 and ngas=379269
    LOS calculation with loop took 0.3777 seconds for nstar=100 and ngas=379269
    Ratio in wallclock: Time_loop/Time_tree=3.1823
    Tree gave=42683950.93 Loop gave=42684090.83 Normalised residual=0.0003%
    LOS calculation with tree took 0.1842 seconds for nstar=100 and ngas=615848
    LOS calculation with loop took 0.6420 seconds for nstar=100 and ngas=615848
    Ratio in wallclock: Time_loop/Time_tree=3.4844
    Tree gave=69137089.85 Loop gave=69137384.84 Normalised residual=0.0004%
    LOS calculation with tree took 0.2573 seconds for nstar=100 and ngas=1000000
    LOS calculation with loop took 1.0324 seconds for nstar=100 and ngas=1000000
    Ratio in wallclock: Time_loop/Time_tree=4.0134
    Tree gave=116682045.72 Loop gave=116682434.93 Normalised residual=0.0003%






|

.. code-block:: default

    import os
    import time
    import numpy as np
    from scipy import signal
    import matplotlib as mpl
    import matplotlib.pyplot as plt
    import matplotlib.gridspec as gridspec
    from unyt import yr, Myr, kpc, arcsec, Mpc

    from synthesizer.grid import Grid
    from synthesizer.parametric import SFH, ZDist
    from synthesizer.parametric import Stars as ParametricStars
    from synthesizer.particle.stars import sample_sfhz
    from synthesizer.particle.stars import Stars
    from synthesizer.particle.gas import Gas
    from synthesizer.particle.galaxy import Galaxy
    from synthesizer.particle.particles import CoordinateGenerator
    from astropy.cosmology import Planck18 as cosmo

    plt.rcParams["font.family"] = "DeJavu Serif"
    plt.rcParams["font.serif"] = ["Times New Roman"]

    # Set the seed
    np.random.seed(42)

    start = time.time()

    # Get the location of this script, __file__ is the absolute path of this
    # script, however we just want to directory
    # script_path = os.path.abspath(os.path.dirname(__file__))

    # Define the grid
    grid_name = "test_grid"
    grid_dir = "../../tests/test_grid/"
    grid = Grid(grid_name, grid_dir=grid_dir)

    # Define the grid (normally this would be defined by an SPS grid)
    log10ages = np.arange(6.0, 10.5, 0.1)
    metallicities = 10 ** np.arange(-5.0, -1.5, 0.1)
    Z_p = {"metallicity": 0.01}
    metal_dist = ZDist.DeltaConstant(**Z_p)
    sfh_p = {"duration": 100 * Myr}
    sfh = SFH.Constant(**sfh_p)  # constant star formation

    # Generate the star formation metallicity history
    mass = 10**10
    param_stars = ParametricStars(
        log10ages,
        metallicities,
        sf_hist_func=sfh,
        metal_dist_func=metal_dist,
        initial_mass=mass,
    )

    for n in [10, 100]: # , 1000, 10000]:
        xs = []
        loop_ys = []
        tree_ys = []
        precision = []
        for ngas in np.logspace(np.log10(n), 6, 20, dtype=int):
            # Make a fake galaxy

            # First make the stars

            # Generate some random coordinates
            coords = CoordinateGenerator.generate_3D_gaussian(n)

            # Calculate the smoothing lengths from radii
            cent = np.mean(coords, axis=0)
            rs = np.sqrt(
                (coords[:, 0] - cent[0]) ** 2
                + (coords[:, 1] - cent[1]) ** 2
                + (coords[:, 2] - cent[2]) ** 2
            )
            rs[rs < 0.2] = 0.6  # Set a lower bound on the "smoothing length"

            # Sample the SFZH, producing a Stars object
            # we will also pass some keyword arguments for attributes
            # we will need for imaging
            stars = sample_sfhz(
                param_stars.sfzh,
                param_stars.log10ages,
                param_stars.log10metallicities,
                n,
                coordinates=coords,
                current_masses=np.full(n, 10**8.7 / n),
                smoothing_lengths=rs / 2,
                redshift=1,
            )

            # Now make the gas

            # Generate some random coordinates
            coords = CoordinateGenerator.generate_3D_gaussian(ngas)

            # Calculate the smoothing lengths from radii
            cent = np.mean(coords, axis=0)
            rs = np.sqrt(
                (coords[:, 0] - cent[0]) ** 2
                + (coords[:, 1] - cent[1]) ** 2
                + (coords[:, 2] - cent[2]) ** 2
            )
            rs[rs < 0.2] = 0.6  # Set a lower bound on the "smoothing length"

            gas = Gas(
                masses=np.random.uniform(10**6, 10**6.5, ngas),
                metallicities=np.random.uniform(0.01, 0.05, ngas),
                coordinates=coords,
                smoothing_lengths=rs / 4,
                dust_to_metal_ratio=0.2,
            )

            # Create galaxy object
            galaxy = Galaxy("Galaxy", stars=stars, gas=gas, redshift=1)

            # Create a fake kernel
            kernel = np.random.normal(0.5, 0.25, 100)
            kernel = np.sort(kernel)[::-1]
            kernel /= np.sum(kernel)

            # Calculate the tau_vs
            start = time.time()
            tau_v = galaxy.calculate_los_tau_v(kappa=0.07, kernel=kernel, force_loop=1)
            loop_time = time.time() - start
            loop_sum = np.sum(tau_v)

            # Calculate the tau_vs
            start = time.time()
            tau_v = galaxy.calculate_los_tau_v(kappa=0.07, kernel=kernel)
            tree_time = time.time() - start
            tree_sum = np.sum(tau_v)

            xs.append(n * ngas)
            loop_ys.append(loop_time)
            tree_ys.append(tree_time)
            precision.append(np.abs(tree_sum - loop_sum) / loop_sum * 100)

            print(
                "LOS calculation with tree took %.4f seconds for nstar=%d and ngas=%d"
                % (tree_time, n, ngas)
            )
            print(
                "LOS calculation with loop took %.4f seconds for nstar=%d and ngas=%d"
                % (loop_time, n, ngas)
            )
            print("Ratio in wallclock: Time_loop/Time_tree=%.4f" % (loop_time / tree_time))
            print(
                "Tree gave=%.2f Loop gave=%.2f Normalised residual=%.4f%%"
                % (tree_sum, loop_sum, np.abs(tree_sum - loop_sum) / loop_sum * 100)
            )

        xs = np.array(xs)
        sinds = np.argsort(xs)
        xs = xs[sinds]
        loop_ys = np.array(loop_ys)[sinds]
        tree_ys = np.array(tree_ys)[sinds]
        precision = np.array(precision)[sinds]

        fig = plt.figure()
        ax = fig.add_subplot(111)
        ax.loglog()
        ax.grid()

        ax.plot(xs, loop_ys, label="Loop")
        ax.plot(xs, tree_ys, label="Tree")

        ax.set_ylabel("Wallclock (s)")
        ax.set_xlabel("$N_\star N_\mathrm{gas}$")

        ax.legend()

        plt.show()
        # fig.savefig("../los_timing_nstar%d.png" % n, dpi=100, bbox_inches="tight")

        fig = plt.figure()
        ax = fig.add_subplot(111)
        ax.semilogx()
        ax.grid()

        ax.plot(xs, precision, label="Loop/Tree")

        ax.set_ylabel(r"$|\tau_{V, tree} - \tau_{V, loop}| / \tau_{V, loop}$ (%)")
        ax.set_xlabel("$N_\star N_\mathrm{gas}$")

        ax.legend()

        # fig.savefig("../los_precision_nstar%d.png" % n, dpi=100, bbox_inches="tight")
        plt.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 6.487 seconds)


.. _sphx_glr_download_auto_examples_particle_plot_get_los_attenutation.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_get_los_attenutation.py <plot_get_los_attenutation.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_get_los_attenutation.ipynb <plot_get_los_attenutation.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
