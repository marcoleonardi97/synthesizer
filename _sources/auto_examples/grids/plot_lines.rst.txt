
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/grids/plot_lines.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_grids_plot_lines.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_grids_plot_lines.py:


Get lines example
=================

This example demonstrates how to:
- get a list of lines associated with a grid
- initialise a grid object with lines
- get line quantities for a single grid point
- ad hoc load an additional line

.. GENERATED FROM PYTHON SOURCE LINES 11-104



.. image-sg:: /auto_examples/grids/images/sphx_glr_plot_lines_001.png
   :alt: plot lines
   :srcset: /auto_examples/grids/images/sphx_glr_plot_lines_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ['AL 2 2660.35A', 'AR 3 7135.79A', 'AR 3 7751.11A', 'C 2 1037.02A', 'C 2 2325.40A', 'C 2 2326.93A', 'C 3 1906.68A', 'C 3 1908.73A', 'CA 2 7291.47A', 'CL 3 5517.71A', 'FE 2 2382.04A', 'FE 2 2625.67A', 'FE 3 4658.01A', 'FE 3 4701.62A', 'FE 3 4881.12A', 'FE 3 5270.40A', 'FE 4 2567.61A', 'FE 4 2829.36A', 'FE 4 2835.74A', 'FE 4 3094.96A', 'H 1 1.00521m', 'H 1 1.09410m', 'H 1 1.28215m', 'H 1 1.81790m', 'H 1 1.87561m', 'H 1 1.94507m', 'H 1 1215.67A', 'H 1 2.16611m', 'H 1 2.62585m', 'H 1 3836.47A', 'H 1 3890.15A', 'H 1 3971.19A', 'H 1 4.05224m', 'H 1 4102.89A', 'H 1 4341.68A', 'H 1 4862.69A', 'H 1 6564.62A', 'H 1 9231.50A', 'H 1 9548.54A', 'MG 2 2795.53A', 'MG 2 2802.71A', 'N 2 6548.05A', 'N 2 6583.45A', 'N 3 991.511A', 'NE 3 3868.76A', 'NE 3 3967.47A', 'O 1 6300.30A', 'O 2 2470.34A', 'O 2 3726.03A', 'O 2 3728.81A', 'O 3 1666.15A', 'O 3 4363.21A', 'O 3 4958.91A', 'O 3 5006.84A', 'S 2 6716.44A', 'S 2 6730.82A', 'S 3 6312.06A', 'S 3 9068.62A', 'S 3 9530.62A', 'SI 2 1179.59A', 'SI 2 1194.50A', 'SI 2 1197.39A', 'SI 2 1265.00A', 'SI 3 1206.50A', 'SI 3 1882.71A', 'SI 3 1892.03A']
    ----------
    SUMMARY OF H 1 4862.69A
    wavelength: 4862.7 Å
    log10(luminosity/erg/s): 41.57
    equivalent width: 4945956008 Å
    ----------
    ----------
    LINE COLLECTION
    lines: ['H 1 4862.69A', 'O 3 4958.91A', 'O 3 5006.84A']
    available ratios: ('BalmerDecrement', 'N2', 'S2', 'O1', 'R2', 'R3', 'R23', 'O32', 'Ne3O2')
    available diagrams: ('OHNO', 'BPT-NII', 'VO78-SII', 'VO78-OI')
    ----------
    ----------
    LINE COLLECTION
    lines: ['AL 2 2660.35A', 'AR 3 7135.79A', 'AR 3 7751.11A', 'C 2 1037.02A', 'C 2 2325.40A', 'C 2 2326.93A', 'C 3 1906.68A', 'C 3 1908.73A', 'CA 2 7291.47A', 'CL 3 5517.71A', 'FE 2 2382.04A', 'FE 2 2625.67A', 'FE 3 4658.01A', 'FE 3 4701.62A', 'FE 3 4881.12A', 'FE 3 5270.40A', 'FE 4 2567.61A', 'FE 4 2829.36A', 'FE 4 2835.74A', 'FE 4 3094.96A', 'H 1 1.00521m', 'H 1 1.09410m', 'H 1 1.28215m', 'H 1 1.81790m', 'H 1 1.87561m', 'H 1 1.94507m', 'H 1 1215.67A', 'H 1 2.16611m', 'H 1 2.62585m', 'H 1 3836.47A', 'H 1 3890.15A', 'H 1 3971.19A', 'H 1 4.05224m', 'H 1 4102.89A', 'H 1 4341.68A', 'H 1 4862.69A', 'H 1 6564.62A', 'H 1 9231.50A', 'H 1 9548.54A', 'MG 2 2795.53A', 'MG 2 2802.71A', 'N 2 6548.05A', 'N 2 6583.45A', 'N 3 991.511A', 'NE 3 3868.76A', 'NE 3 3967.47A', 'O 1 6300.30A', 'O 2 2470.34A', 'O 2 3726.03A', 'O 2 3728.81A', 'O 3 1666.15A', 'O 3 4363.21A', 'O 3 4958.91A', 'O 3 5006.84A', 'S 2 6716.44A', 'S 2 6730.82A', 'S 3 6312.06A', 'S 3 9068.62A', 'S 3 9530.62A', 'SI 2 1179.59A', 'SI 2 1194.50A', 'SI 2 1197.39A', 'SI 2 1265.00A', 'SI 3 1206.50A', 'SI 3 1882.71A', 'SI 3 1892.03A']
    available ratios: ('BalmerDecrement', 'N2', 'S2', 'O1', 'R2', 'R3', 'R23', 'O32', 'Ne3O2')
    available diagrams: ('OHNO', 'BPT-NII', 'VO78-SII', 'VO78-OI')
    ----------
    BalmerDecrement: 2.90
    BalmerDecrement: 2.90
    N2: 0.06
    S2: 0.10
    O1: 0.01
    R2: 0.57
    R3: 3.80
    R23: 6.43
    O32: 6.62
    Ne3O2: 0.34






|

.. code-block:: Python

    import matplotlib.pyplot as plt
    from synthesizer.grid import Grid

    if __name__ == "__main__":
        # Get the location of this script, __file__ is the absolute path of this
        # script, however we just want to directory
        # script_path = os.path.abspath(os.path.dirname(__file__))

        # Define the grid
        grid_name = "test_grid"
        grid_dir = "../../tests/test_grid/"

        # initialise grid
        grid = Grid(grid_name, grid_dir=grid_dir, read_lines=True)

        # get list of lines
        print(grid.available_lines)

        # choose age and metallicity
        log10age = 6.0  # log10(age/yr)
        metallicity = 0.01  # metallicity

        # get the grid point for this log10age and metallicity
        grid_point = grid.get_grid_point((log10age, metallicity))

        # get information on one line
        line = grid.get_line(grid_point, "H 1 4862.69A")
        print(line)

        # or a combination of lines, e.g. a doublet
        line = grid.get_lines(
            grid_point, ["H 1 4862.69A", "O 3 4958.91A", "O 3 5006.84A"]
        )
        print(line)

        # create a line collection from all lines
        lines = grid.get_lines(grid_point, grid.available_lines)
        print(lines)

        # we can measure line ratios
        ratio_id = "BalmerDecrement"
        ratio = lines.get_ratio(ratio_id)  # R23, R2, R3, ...
        print(f"{ratio_id}: {ratio:.2f}")

        # or loop over availalable ratios
        for ratio_id in lines.available_ratios:
            ratio = lines.get_ratio(ratio_id)
            print(f"{ratio_id}: {ratio:.2f}")

        # we can plot a ratio against metallicity by looping over the metallicity
        # grid
        ratio_id = "R23"
        ia = 0  # 1 Myr old for test grid
        ratios = []
        for iZ, Z in enumerate(grid.metallicity):
            grid_point = (ia, iZ)
            lines = grid.get_lines(grid_point, grid.available_lines)
            ratios.append(lines.get_ratio(ratio_id))

        Zsun = grid.metallicity / 0.0124
        plt.plot(Zsun, ratios)
        plt.xlim([0.01, 1])
        plt.ylim([1, 20])
        plt.xscale("log")
        plt.yscale("log")
        plt.xlabel(r"$Z/Z_{\odot}$")
        plt.ylabel(lines.get_ratio_label(ratio_id))
        plt.show()

        # we can also generate "diagrams" pairs of line ratios like the BPT diagram
        diagram_id = "BPT-NII"
        ia = 0  # 1 Myr old for test grid
        x = []
        y = []
        for iZ, Z in enumerate(grid.metallicity):
            grid_point = (ia, iZ)
            lines = grid.get_lines(grid_point, grid.available_lines)
            x_, y_ = lines.get_diagram(diagram_id)
            x.append(x_)
            y.append(y_)

        plt.plot(x, y)
        plt.xlim([0.01, 10])
        plt.ylim([0.05, 20])
        plt.xscale("log")
        plt.yscale("log")

        # grab x and y labels, this time use "fancy" label ids
        xlabel, ylabel = lines.get_diagram_label(diagram_id, fancy=True)

        plt.xlabel(xlabel)
        plt.ylabel(ylabel)
        plt.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.522 seconds)


.. _sphx_glr_download_auto_examples_grids_plot_lines.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_lines.ipynb <plot_lines.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_lines.py <plot_lines.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
