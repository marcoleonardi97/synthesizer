
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/cosmo/test_aperture_mask.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_cosmo_test_aperture_mask.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_cosmo_test_aperture_mask.py:


Aperture Mask Example
=====================

Show how to implement fixed spherical apertures
when getting the emission from galaxy objects.

.. GENERATED FROM PYTHON SOURCE LINES 8-58

.. code-block:: Python


    import matplotlib.pyplot as plt
    import numpy as np
    from synthesizer.grid import Grid
    from synthesizer.load_data.load_camels import load_CAMELS_IllustrisTNG
    from unyt import kpc

    grid_dir = "../../tests/test_grid"
    grid_name = "test_grid"
    grid = Grid(grid_name, grid_dir=grid_dir)

    gals = load_CAMELS_IllustrisTNG(
        "../../tests/data/",
        snap_name="camels_snap.hdf5",
        fof_name="camels_subhalo.hdf5",
        fof_dir="../../tests/data/",
    )

    # Select a single galaxy
    gal = gals[1]

    # Test calculating the centre manually
    print("Galaxy centre from file: gal.centre", gal.centre)

    print(
        "Stars centre adopted from parent galaxy: gal.stars.centre",
        gal.stars.centre,
    )

    gal.stars.calculate_centre_of_mass()

    print("Stars centre of mass: gal.stars.centre = ", gal.stars.centre)

    print("Galaxy centre unchanged: gal.centre = ", gal.centre)


    fig, ax = plt.subplots(1, 1)

    for aperture_radius in np.array([30, 10, 5, 2, 1, 0.5]) * kpc:
        spec = gal.stars.get_spectra_incident(grid=grid, aperture=aperture_radius)

        ax.loglog(spec.lam, spec.lnu, label=f"Aperture: {aperture_radius.value}")

    ax.set_ylim(1e20, 1e30)
    ax.set_xlim(1e2, 2e4)
    ax.legend()
    ax.set_xlabel("$\\lambda \\,/\\, \\AA$")
    ax.set_ylabel("$L_{\\lambda} / \\mathrm{erg / Hz / s}$")

    plt.show()


.. _sphx_glr_download_auto_examples_cosmo_test_aperture_mask.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: test_aperture_mask.ipynb <test_aperture_mask.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: test_aperture_mask.py <test_aperture_mask.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: test_aperture_mask.zip <test_aperture_mask.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
